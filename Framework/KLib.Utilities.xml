<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KLib.Utilities</name>
    </assembly>
    <members>
        <member name="T:KLib.Utilities.GaussianRandom">
            <summary>
            Gaussian random number generator.
            </summary>
            <remarks>
            Based on code found on <see href="http://stackoverflow.com/questions/218060/random-gaussian-variables">StackOverflow</see> 
            </remarks>
        </member>
        <member name="M:KLib.Utilities.GaussianRandom.#ctor(System.Random)">
            <summary>
            Create GaussianRandom object.
            </summary>
            <param name="random">Optional object of class <see cref="T:System.Random"/>, a uniform random number generator.</param>
        </member>
        <member name="M:KLib.Utilities.GaussianRandom.Next(System.Double,System.Double)">
            <summary>
            Generates normally (Gaussian) distributed random numbers, using the Box-Muller
            transformation.  This transformation takes two uniformly distributed deviates
            within the unit circle, and transforms them into two independently
            distributed normal deviates.
            </summary>
            <param name="mu">The mean of the distribution.  Default is zero.</param>
            <param name="sigma">The standard deviation of the distribution.  Default is one.</param>
            <returns>Random number ~ N(<paramref name="mu"/>,<paramref name="sigma"/>)</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Standard deviation <paramref name="sigma"/> must be positive.</exception>
        </member>
        <member name="T:KLib.Utilities.TruncatedNormalRandom">
            <summary>
            Generate random numbers from a truncated normal distribution (bounded support)
            </summary>
            <remarks>
            Transcribed from a MATLAB file by Ken Hancock, Oct 2013. Original MATLAB comments follow:<br/>
            <br/>%RTNORM    Pseudorandom numbers from a truncated Gaussian distribution.
            <br/>%
            <br/>%  X = RTNORM(A,B) returns a pseudorandom variable generated from a normal
            <br/>%  distribution with mean zero and variance one (i.e. standard normal
            <br/>%  distribution) truncated to the interval [A,B].
            <br/>%
            <br/>%  X = RTNORM(A,B,MU,SIGMA) returns a pseudorandom variable generated from
            <br/>%  a normal distribution with mean MU and variance SIGMA truncated to the
            <br/>%  interval [A,B].
            <br/>%
            <br/>%  [X,P] = RTNORM(...) also returns the vector of probabilities of X.
            <br/>%
            <br/>%  This implements an extension of Chopin's algorithm detailed in
            <br/>%  N. Chopin, "Fast simulation of truncated Gaussian distributions", Stat
            <br/>%  Comput (2011) 21:275-288
            <br/>%
            <br/>%Copyright (C) 2012 Vincent Mazet (LSIIT, CNRS/Universit√© de Strasbourg),
            <br/>%Version 2012-07-04, vincent.mazet@unistra.fr
            <br/>
            <br/>%18/06/2012:
            <br/>%  - first launch of rtnorm.m
            <br/>%05/07/2012:
            <br/>%  - fix bug concerning the computing of the pdf when (mu,sigma) is
            <br/>%    different from (0,1). 
            <br/>%  - fix bug about some indexes out of bounds when computing yl for some
            <br/>%    values of the input arguments.
            <br/>%04/09/2012:
            <br/>%  - change condition in line 2628 to fix a bug.
            <br/>%
            <br/>%Licence: GNU General Public License Version 2
            <br/>%This program is free software; you can redistribute it and/or modify it
            <br/>%under the terms of the GNU General Public License as published by the
            <br/>%Free Software Foundation; either version 2 of the License, or (at your
            <br/>%option) any later version. This program is distributed in the hope that
            <br/>%it will be useful, but WITHOUT ANY WARRANTY; without even the implied
            <br/>%warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            <br/>%GNU General Public License for more details. You should have received a
            <br/>%copy of the GNU General Public License along with this program; if not,
            <br/>%see http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
            </remarks>
        </member>
        <member name="M:KLib.Utilities.TruncatedNormalRandom.#ctor">
            <summary>
            Construct truncated normal random number generator.
            </summary>
        </member>
        <member name="M:KLib.Utilities.TruncatedNormalRandom.PDF(System.Double,System.Double[]@,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="dx"></param>
            <param name="x"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="mu"></param>
            <param name="sigma"></param>
            <returns></returns>
        </member>
        <member name="M:KLib.Utilities.TruncatedNormalRandom.PDF(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="mu"></param>
            <param name="sigma"></param>
            <returns></returns>
        </member>
        <member name="M:KLib.Utilities.TruncatedNormalRandom.Next(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generate one random number from a truncated normal probability distribution.
            </summary>
            <param name="a">Minimum value of random number.</param>
            <param name="b">Maximum value of random number</param>
            <param name="mu">Mean of underlying normal distribution.</param>
            <param name="sigma">Standard deviation of underlying normal distribution.</param>
            <returns>Random number</returns>
        </member>
        <member name="M:KLib.Utilities.TruncatedNormalRandom.rtstdnorm(System.Double,System.Double)">
            <summary>
            RTSTDNORM Pseudorandom numbers from a truncated (normalized) Gaussian distribution (i.e. rtnorm(a,b,0,1)).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:KLib.Utilities.RaisedCosineRandom">
            <summary>
            Random number generator with a raised cosine probability distribution.
            </summary>
            <remarks>
            Generates random numbers on the interval [-0.5, 0.5] using a sinusoidal probability distribution function.
            The shape of the distribution is controlled by one parameter <paramref name="m"/>.
            </remarks>
        </member>
        <member name="M:KLib.Utilities.RaisedCosineRandom.#ctor(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="exp"></param>
            <param name="m"></param>
        </member>
        <member name="M:KLib.Utilities.RaisedCosineRandom.#ctor(System.Random,System.Int32,System.Double)">
            <summary>
            Create SineRandom object.
            </summary>
            <param name="random">Optional object of class <see cref="T:System.Random"/>, a uniform random number generator.</param>
            <param name="exp"></param>
            <param name="m"></param>
        </member>
        <member name="M:KLib.Utilities.RaisedCosineRandom.GetInvCDF(System.Double[]@)">
            <summary>
            Return InvCDF (for debugging purposes)
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:KLib.Utilities.RaisedCosineRandom.Next">
            <summary>
            Generate a single random number from a raised-cosine probability distribution.
            </summary>
            <returns>Random number [-0.5, 0.5] from a raised-cosine probability distribution.</returns>
        </member>
        <member name="T:KLib.Crypto.Crypto">
            <summary>
            basic Encrption/decryption functionaility
            </summary>
        </member>
        <member name="M:KLib.Crypto.Crypto.Encrypt(System.String)">
            <summary>
                Encrypt a string
            </summary>
            <param name="inputText">text to encrypt</param>
            <returns>an encrypted string</returns>
        </member>
        <member name="M:KLib.Crypto.Crypto.Encrypt(System.String,System.String)">
            <summary>
                Encrypt string with user defined password
            </summary>
            <param name="inputText">text to encrypt</param>
            <param name="password">password to use when encrypting</param>
            <returns>an encrypted string</returns>
        </member>
        <member name="M:KLib.Crypto.Crypto.Encrypt(System.String,System.String,KLib.Crypto.Crypto.CryptoTypes)">
            <summary>
                Encrypt string acc. to cryptoType and with user defined password
            </summary>
            <param name="inputText">text to encrypt</param>
            <param name="password">password to use when encrypting</param>
            <param name="cryptoType">type of encryption</param>
            <returns>an encrypted string</returns>
        </member>
        <member name="M:KLib.Crypto.Crypto.Encrypt(System.String,KLib.Crypto.Crypto.CryptoTypes)">
            <summary>
                Encrypt string acc. to cryptoType
            </summary>
            <param name="inputText">text to encrypt</param>
            <param name="cryptoType">type of encryption</param>
            <returns>an encrypted string</returns>
        </member>
        <member name="M:KLib.Crypto.Crypto.Decrypt(System.String)">
            <summary>
                decrypts a string
            </summary>
            <param name="inputText">string to decrypt</param>
            <returns>a decrypted string</returns>
        </member>
        <member name="M:KLib.Crypto.Crypto.Decrypt(System.String,System.String)">
            <summary>
                decrypts a string using a user defined password key
            </summary>
            <param name="inputText">string to decrypt</param>
            <param name="password">password to use when decrypting</param>
            <returns>a decrypted string</returns>
        </member>
        <member name="M:KLib.Crypto.Crypto.Decrypt(System.String,System.String,KLib.Crypto.Crypto.CryptoTypes)">
            <summary>
                decrypts a string acc. to decryption type and user defined password key
            </summary>
            <param name="inputText">string to decrypt</param>
            <param name="password">password key used to decrypt</param>
            <param name="cryptoType">type of decryption</param>
            <returns>a decrypted string</returns>
        </member>
        <member name="M:KLib.Crypto.Crypto.Decrypt(System.String,KLib.Crypto.Crypto.CryptoTypes)">
            <summary>
                decrypts a string acc. to the decryption type
            </summary>
            <param name="inputText">string to decrypt</param>
            <param name="cryptoType">type of decryption</param>
            <returns>a decrypted string</returns>
        </member>
        <member name="M:KLib.Crypto.Crypto.EncryptDecrypt(System.Byte[],System.Boolean)">
            <summary>
                performs the actual enc/dec.
            </summary>
            <param name="inputBytes">input byte array</param>
            <param name="Encrpyt">wheather or not to perform enc/dec</param>
            <returns>byte array output</returns>
        </member>
        <member name="M:KLib.Crypto.Crypto.getCryptoTransform(System.Boolean)">
            <summary>
                returns the symmetric engine and creates the encyptor/decryptor
            </summary>
            <param name="encrypt">whether to return a encrpytor or decryptor</param>
            <returns>ICryptoTransform</returns>
        </member>
        <member name="M:KLib.Crypto.Crypto.selectAlgorithm">
            <summary>
                returns the specific symmetric algorithm acc. to the cryptotype
            </summary>
            <returns>SymmetricAlgorithm</returns>
        </member>
        <member name="M:KLib.Crypto.Crypto.calculateNewKeyAndIV">
            <summary>
                calculates the key and IV acc. to the symmetric method from the password
                key and IV size dependant on symmetric method
            </summary>
        </member>
        <member name="P:KLib.Crypto.Crypto.CryptoType">
            <summary>
                type of encryption / decryption used
            </summary>
        </member>
        <member name="P:KLib.Crypto.Crypto.Password">
            <summary>
                Passsword Key Property.
                The password key used when encrypting / decrypting
            </summary>
        </member>
        <member name="T:KLib.Crypto.Hashing">
            <summary>
            Hashing class. Only static members so no need to create an instance
            </summary>
        </member>
        <member name="M:KLib.Crypto.Hashing.isHashEqual(System.String,System.String)">
            <summary>
                returns true if the input text is equal to hashed text
            </summary>
            <param name="inputText">unhashed text to test</param>
            <param name="hashText">already hashed text</param>
            <returns>boolean true or false</returns>
        </member>
        <member name="M:KLib.Crypto.Hashing.ComputeHash(System.String,KLib.Crypto.Hashing.HashingTypes)">
            <summary>
                computes the hash code and converts it to string
            </summary>
            <param name="inputText">input text to be hashed</param>
            <param name="hashingType">type of hashing to use</param>
            <returns>hashed string</returns>
        </member>
        <member name="M:KLib.Crypto.Hashing.getHashAlgorithm(KLib.Crypto.Hashing.HashingTypes)">
            <summary>
                returns the specific hashing alorithm
            </summary>
            <param name="hashingType">type of hashing to use</param>
            <returns>HashAlgorithm</returns>
        </member>
    </members>
</doc>
